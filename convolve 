{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PriyaIngle7/My-Strength-Shree-Krishna/blob/main/convolve%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gTnHns3lyvgD",
        "outputId": "d42e620d-374d-486e-f727-a2ae03a62ccf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Shape: (3101, 1216)\n",
            "First 5 Rows:\n",
            "    account_number  bad_flag  onus_attribute_1  transaction_attribute_1  \\\n",
            "0               1         0               NaN                      NaN   \n",
            "1               2         0          221000.0                      0.0   \n",
            "2               3         0           25000.0                      0.0   \n",
            "3               4         0           86000.0                      0.0   \n",
            "4               5         0          215000.0                      0.0   \n",
            "\n",
            "   transaction_attribute_2  transaction_attribute_3  transaction_attribute_4  \\\n",
            "0                      NaN                      NaN                      NaN   \n",
            "1                      0.0                      0.0                      0.0   \n",
            "2                      0.0                      0.0                      0.0   \n",
            "3                      0.0                      0.0                      0.0   \n",
            "4                      0.0                      0.0                      0.0   \n",
            "\n",
            "   transaction_attribute_5  transaction_attribute_6  transaction_attribute_7  \\\n",
            "0                      NaN                      NaN                      NaN   \n",
            "1                      0.0                      0.0                      0.0   \n",
            "2                      0.0                      0.0                      0.0   \n",
            "3                      0.0                      0.0                      0.0   \n",
            "4                      0.0                      0.0                      0.0   \n",
            "\n",
            "   ...  bureau_enquiry_47  bureau_enquiry_48  bureau_enquiry_49  \\\n",
            "0  ...                0.0                0.0                0.0   \n",
            "1  ...                0.0                0.0                2.0   \n",
            "2  ...                0.0                0.0                0.0   \n",
            "3  ...                0.0                0.0                0.0   \n",
            "4  ...                0.0                0.0                0.0   \n",
            "\n",
            "   bureau_enquiry_50  onus_attribute_43  onus_attribute_44  onus_attribute_45  \\\n",
            "0                1.0                NaN                NaN                NaN   \n",
            "1                3.0                0.0                0.0                0.0   \n",
            "2                8.0                NaN                NaN                NaN   \n",
            "3               30.0                NaN                NaN                NaN   \n",
            "4                1.0                NaN                NaN                NaN   \n",
            "\n",
            "   onus_attribute_46  onus_attribute_47  onus_attribute_48  \n",
            "0                NaN                NaN                NaN  \n",
            "1                0.0                0.0                0.0  \n",
            "2                NaN                NaN                NaN  \n",
            "3                NaN                NaN                NaN  \n",
            "4                NaN                NaN                NaN  \n",
            "\n",
            "[5 rows x 1216 columns]\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import roc_auc_score, classification_report\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Load dataset\n",
        "file_path = 'Dev_data_to_be_shared.csv'\n",
        "data = pd.read_csv(file_path)\n",
        "\n",
        "# Preview dataset\n",
        "print(\"Dataset Shape:\", data.shape)\n",
        "print(\"First 5 Rows:\\n\", data.head())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "missing_data = data.isnull().mean() * 100\n",
        "print(\"Columns with Missing Data:\\n\", missing_data[missing_data > 0].sort_values(ascending=False))\n",
        "\n",
        "# Distribution of target variable\n",
        "target_distribution = data['bad_flag'].value_counts(normalize=True) * 100\n",
        "print(\"Target Distribution:\\n\", target_distribution)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dNJ-F2eHzIj1",
        "outputId": "f8207ed0-19b5-4776-cf39-28b85a99a5a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Columns with Missing Data:\n",
            " bureau_436           100.000000\n",
            "bureau_447           100.000000\n",
            "bureau_449            94.421154\n",
            "bureau_148            93.002257\n",
            "bureau_448            89.906482\n",
            "                        ...    \n",
            "onus_attribute_38      0.032248\n",
            "onus_attribute_39      0.032248\n",
            "onus_attribute_40      0.032248\n",
            "onus_attribute_41      0.032248\n",
            "onus_attribute_19      0.032248\n",
            "Length: 1214, dtype: float64\n",
            "Target Distribution:\n",
            " bad_flag\n",
            "0    98.48436\n",
            "1     1.51564\n",
            "Name: proportion, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "missing_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "mvQXYVby2RpD",
        "outputId": "4e43f4aa-81de-4152-fc64-9fb6a433ffec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "account_number              0.000000\n",
              "bad_flag                    0.000000\n",
              "onus_attribute_1           25.507901\n",
              "transaction_attribute_1    25.507901\n",
              "transaction_attribute_2    25.507901\n",
              "                             ...    \n",
              "onus_attribute_44          87.649145\n",
              "onus_attribute_45          87.649145\n",
              "onus_attribute_46          87.649145\n",
              "onus_attribute_47          87.649145\n",
              "onus_attribute_48          87.649145\n",
              "Length: 1216, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>account_number</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bad_flag</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_1</th>\n",
              "      <td>25.507901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>transaction_attribute_1</th>\n",
              "      <td>25.507901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>transaction_attribute_2</th>\n",
              "      <td>25.507901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_44</th>\n",
              "      <td>87.649145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_45</th>\n",
              "      <td>87.649145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_46</th>\n",
              "      <td>87.649145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_47</th>\n",
              "      <td>87.649145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>onus_attribute_48</th>\n",
              "      <td>87.649145</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1216 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop columns with more than 50% missing values\n",
        "columns_to_drop = missing_data[missing_data > 50].index\n",
        "data_cleaned = data.drop(columns=columns_to_drop)\n",
        "\n",
        "# Impute missing values in the remaining columns\n",
        "imputer = SimpleImputer(strategy='median')  # Use median for numerical columns\n",
        "data_cleaned.iloc[:, 2:] = pd.DataFrame(\n",
        "    imputer.fit_transform(data_cleaned.iloc[:, 2:]),\n",
        "    columns=data_cleaned.columns[2:],\n",
        "    index=data_cleaned.index,\n",
        ")\n",
        "\n",
        "# Ensure no remaining missing values\n",
        "print(\"Missing values after cleaning:\\n\", data_cleaned.isnull().sum())\n",
        "\n",
        "# Split data into features and target\n",
        "X = data_cleaned.drop(['account_number', 'bad_flag'], axis=1)\n",
        "y = data_cleaned['bad_flag']\n",
        "\n",
        "# Convert categorical variables to numerical (if any)\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "for col in X.select_dtypes(include='object').columns:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "\n",
        "# Handle class imbalance using SMOTE\n",
        "from imblearn.over_sampling import SMOTE\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "# Split data into training and test sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)\n",
        "\n",
        "print(\"Shapes: X_train:\", X_train.shape, \"X_test:\", X_test.shape, \"y_train:\", y_train.shape, \"y_test:\", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G2ojZaCTzUb4",
        "outputId": "98850491-0184-4a7c-bf82-7194314a821d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing values after cleaning:\n",
            " account_number             0\n",
            "bad_flag                   0\n",
            "onus_attribute_1           0\n",
            "transaction_attribute_1    0\n",
            "transaction_attribute_2    0\n",
            "                          ..\n",
            "bureau_enquiry_46          0\n",
            "bureau_enquiry_47          0\n",
            "bureau_enquiry_48          0\n",
            "bureau_enquiry_49          0\n",
            "bureau_enquiry_50          0\n",
            "Length: 1197, dtype: int64\n",
            "Shapes: X_train: (4886, 1195) X_test: (1222, 1195) y_train: (4886,) y_test: (1222,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train a Random Forest Classifier\n",
        "for i in\n",
        "model = RandomForestClassifier(random_state=42, n_estimators=10, class_weight='balanced')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Predict on test set\n",
        "y_pred_proba = model.predict_proba(X_test)[:, 1]\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate Model\n",
        "roc_auc = roc_auc_score(y_test, y_pred_proba)\n",
        "print(\"AUC-ROC Score:\", roc_auc)\n",
        "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ghjV72Xqzac7",
        "outputId": "1144764e-a578-4a1e-ed01-f8e883787bee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC-ROC Score: 0.9999852499463635\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       632\n",
            "           1       1.00      0.99      1.00       590\n",
            "\n",
            "    accuracy                           1.00      1222\n",
            "   macro avg       1.00      1.00      1.00      1222\n",
            "weighted avg       1.00      1.00      1.00      1222\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load validation dataset\n",
        "validation_data_path = 'validation_data_to_be_shared.csv'  # Update with your actual file path\n",
        "validation_data = pd.read_csv(validation_data_path)\n",
        "\n",
        "# Preprocess validation data\n",
        "validation_data_cleaned = validation_data.drop(columns=columns_to_drop, errors='ignore')\n",
        "\n",
        "# Ensure validation data has all the columns seen during training\n",
        "missing_cols = [col for col in X.columns if col not in validation_data_cleaned.columns]\n",
        "for col in missing_cols:\n",
        "    validation_data_cleaned[col] = 0  # Add missing columns with default value\n",
        "validation_data_cleaned = validation_data_cleaned[X.columns]\n",
        "\n",
        "# Impute missing values in validation data\n",
        "validation_data_cleaned.iloc[:, :] = imputer.transform(validation_data_cleaned)\n",
        "\n",
        "# Predict probabilities on validation data\n",
        "validation_probs = model.predict_proba(validation_data_cleaned)[:, 1]\n",
        "\n",
        "# Save predictions\n",
        "output = pd.DataFrame({'account_number': validation_data['account_number'], 'predicted_probability': validation_probs})\n",
        "output.to_csv('validation_predictions.csv', index=False)\n",
        "print(\"Predictions saved to 'validation_predictions.csv'.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ykmMscDJzgjE",
        "outputId": "7dc9cc14-5bdf-42ba-f100-c7bf666bb283"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictions saved to 'validation_predictions.csv'.\n"
          ]
        }
      ]
    }
  ]
}